{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "861f810c40d4327bb33393edab849507668ed15ec44832073d66732cd76ea09b": {
      "translations": {
        "python": {
          "source": "website_bucket = s3.Bucket(self, \"WebsiteBucket\",\n    website_index_document=\"index.html\",\n    public_read_access=True\n)\n\ns3deploy.BucketDeployment(self, \"DeployWebsite\",\n    sources=[s3deploy.Source.asset(\"./website-dist\")],\n    destination_bucket=website_bucket,\n    destination_key_prefix=\"web/static\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var websiteBucket = new s3.Bucket(this, \"WebsiteBucket\", new Struct {\n    WebsiteIndexDocument = \"index.html\",\n    PublicReadAccess = true\n});\n\nnew s3deploy.BucketDeployment(this, \"DeployWebsite\", new Struct {\n    Sources = new [] { s3deploy.Source.Asset(\"./website-dist\") },\n    DestinationBucket = websiteBucket,\n    DestinationKeyPrefix = \"web/static\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Object websiteBucket = Bucket.Builder.create(this, \"WebsiteBucket\")\n        .websiteIndexDocument(\"index.html\")\n        .publicReadAccess(true)\n        .build();\n\nBucketDeployment.Builder.create(this, \"DeployWebsite\")\n        .sources(List.of(s3deploy.Source.asset(\"./website-dist\")))\n        .destinationBucket(websiteBucket)\n        .destinationKeyPrefix(\"web/static\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const websiteBucket = new s3.Bucket(this, 'WebsiteBucket', {\n  websiteIndexDocument: 'index.html',\n  publicReadAccess: true\n});\n\nnew s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset('./website-dist')],\n  destinationBucket: websiteBucket,\n  destinationKeyPrefix: 'web/static' // optional prefix in destination bucket\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-deployment"
        },
        "field": {
          "field": "markdown",
          "line": 20
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const websiteBucket = new s3.Bucket(this, 'WebsiteBucket', {\n  websiteIndexDocument: 'index.html',\n  publicReadAccess: true\n});\n\nnew s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset('./website-dist')],\n  destinationBucket: websiteBucket,\n  destinationKeyPrefix: 'web/static' // optional prefix in destination bucket\n});",
      "syntaxKindCounter": {
        "10": 5,
        "75": 14,
        "104": 2,
        "106": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "24f00b135907e30fd9c95aa985faebbf288e7725e76032be060b946a6536d644": {
      "translations": {
        "python": {
          "source": "s3deploy.BucketDeployment(self, \"DeployMeWithoutDeletingFilesOnDestination\",\n    sources=[s3deploy.Source.asset(path.join(__dirname, \"my-website\"))],\n    destination_bucket=destination_bucket,\n    prune=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new s3deploy.BucketDeployment(this, \"DeployMeWithoutDeletingFilesOnDestination\", new Struct {\n    Sources = new [] { s3deploy.Source.Asset(path.Join(__dirname, \"my-website\")) },\n    DestinationBucket = destinationBucket,\n    Prune = false\n});",
          "version": "1"
        },
        "java": {
          "source": "BucketDeployment.Builder.create(this, \"DeployMeWithoutDeletingFilesOnDestination\")\n        .sources(List.of(s3deploy.Source.asset(path.join(__dirname, \"my-website\"))))\n        .destinationBucket(destinationBucket)\n        .prune(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new s3deploy.BucketDeployment(this, 'DeployMeWithoutDeletingFilesOnDestination', {\n  sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n  destinationBucket,\n  prune: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-deployment"
        },
        "field": {
          "field": "markdown",
          "line": 112
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "new s3deploy.BucketDeployment(this, 'DeployMeWithoutDeletingFilesOnDestination', {\n  sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n  destinationBucket,\n  prune: false,\n});",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "91": 1,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "a327ba86ab6629efe0309a7007eda1410b1c85af18eb0331a379527656c3688d": {
      "translations": {
        "python": {
          "source": "BucketDeployment(self, \"BucketDeployment\",\n    sources=[Source.asset(\"./website\", exclude=[\"index.html\"])],\n    destination_bucket=bucket,\n    cache_control=[CacheControl.from_string(\"max-age=31536000,public,immutable\")],\n    prune=False\n)\n\nBucketDeployment(self, \"HTMLBucketDeployment\",\n    sources=[Source.asset(\"./website\", exclude=[\"*\", \"!index.html\"])],\n    destination_bucket=bucket,\n    cache_control=[CacheControl.from_string(\"max-age=0,no-cache,no-store,must-revalidate\")],\n    prune=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new BucketDeployment(this, \"BucketDeployment\", new Struct {\n    Sources = new [] { Source.Asset(\"./website\", new Struct { Exclude = new [] { \"index.html\" } }) },\n    DestinationBucket = bucket,\n    CacheControl = new [] { CacheControl.FromString(\"max-age=31536000,public,immutable\") },\n    Prune = false\n});\n\nnew BucketDeployment(this, \"HTMLBucketDeployment\", new Struct {\n    Sources = new [] { Source.Asset(\"./website\", new Struct { Exclude = new [] { \"*\", \"!index.html\" } }) },\n    DestinationBucket = bucket,\n    CacheControl = new [] { CacheControl.FromString(\"max-age=0,no-cache,no-store,must-revalidate\") },\n    Prune = false\n});",
          "version": "1"
        },
        "java": {
          "source": "BucketDeployment.Builder.create(this, \"BucketDeployment\")\n        .sources(List.of(Source.asset(\"./website\", Map.of(\"exclude\", List.of(\"index.html\")))))\n        .destinationBucket(bucket)\n        .cacheControl(List.of(CacheControl.fromString(\"max-age=31536000,public,immutable\")))\n        .prune(false)\n        .build();\n\nBucketDeployment.Builder.create(this, \"HTMLBucketDeployment\")\n        .sources(List.of(Source.asset(\"./website\", Map.of(\"exclude\", List.of(\"*\", \"!index.html\")))))\n        .destinationBucket(bucket)\n        .cacheControl(List.of(CacheControl.fromString(\"max-age=0,no-cache,no-store,must-revalidate\")))\n        .prune(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new BucketDeployment(this, 'BucketDeployment', {\n  sources: [Source.asset('./website', { exclude: ['index.html'] })],\n  destinationBucket: bucket,\n  cacheControl: [CacheControl.fromString('max-age=31536000,public,immutable')],\n  prune: false,\n});\n\nnew BucketDeployment(this, 'HTMLBucketDeployment', {\n  sources: [Source.asset('./website', { exclude: ['*', '!index.html'] })],\n  destinationBucket: bucket,\n  cacheControl: [CacheControl.fromString('max-age=0,no-cache,no-store,must-revalidate')],\n  prune: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-deployment"
        },
        "field": {
          "field": "markdown",
          "line": 124
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "new BucketDeployment(this, 'BucketDeployment', {\n  sources: [Source.asset('./website', { exclude: ['index.html'] })],\n  destinationBucket: bucket,\n  cacheControl: [CacheControl.fromString('max-age=31536000,public,immutable')],\n  prune: false,\n});\n\nnew BucketDeployment(this, 'HTMLBucketDeployment', {\n  sources: [Source.asset('./website', { exclude: ['*', '!index.html'] })],\n  destinationBucket: bucket,\n  cacheControl: [CacheControl.fromString('max-age=0,no-cache,no-store,must-revalidate')],\n  prune: false,\n});",
      "syntaxKindCounter": {
        "10": 9,
        "75": 22,
        "91": 2,
        "104": 2,
        "192": 6,
        "193": 4,
        "194": 4,
        "196": 4,
        "197": 2,
        "226": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "83d2c863e26099979be0f00d0233772b47c90243a221c3aa2411dd9a6015d827": {
      "translations": {
        "python": {
          "source": "BucketDeployment(self, \"HTMLBucketDeployment\",\n    sources=[Source.asset(\"./website\", exclude=[\"*\", \"!index.html\"])],\n    destination_bucket=bucket\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new BucketDeployment(this, \"HTMLBucketDeployment\", new Struct {\n    Sources = new [] { Source.Asset(\"./website\", new Struct { Exclude = new [] { \"*\", \"!index.html\" } }) },\n    DestinationBucket = bucket\n});",
          "version": "1"
        },
        "java": {
          "source": "BucketDeployment.Builder.create(this, \"HTMLBucketDeployment\")\n        .sources(List.of(Source.asset(\"./website\", Map.of(\"exclude\", List.of(\"*\", \"!index.html\")))))\n        .destinationBucket(bucket)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new BucketDeployment(this, 'HTMLBucketDeployment', {\n  sources: [Source.asset('./website', { exclude: ['*', '!index.html'] })],\n  destinationBucket: bucket,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-deployment"
        },
        "field": {
          "field": "markdown",
          "line": 144
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "new BucketDeployment(this, 'HTMLBucketDeployment', {\n  sources: [Source.asset('./website', { exclude: ['*', '!index.html'] })],\n  destinationBucket: bucket,\n});",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "05765f1e4f8d0701297ae29f30d8db499bb7e8c75bf5c8492341238ce29dcc47": {
      "translations": {
        "python": {
          "source": "s3deploy.BucketDeployment(self, \"DeployButExcludeSpecificFiles\",\n    sources=[s3deploy.Source.asset(path.join(__dirname, \"my-website\"))],\n    destination_bucket=destination_bucket,\n    exclude=[\"*.txt\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new s3deploy.BucketDeployment(this, \"DeployButExcludeSpecificFiles\", new Struct {\n    Sources = new [] { s3deploy.Source.Asset(path.Join(__dirname, \"my-website\")) },\n    DestinationBucket = destinationBucket,\n    Exclude = new [] { \"*.txt\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "BucketDeployment.Builder.create(this, \"DeployButExcludeSpecificFiles\")\n        .sources(List.of(s3deploy.Source.asset(path.join(__dirname, \"my-website\"))))\n        .destinationBucket(destinationBucket)\n        .exclude(List.of(\"*.txt\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new s3deploy.BucketDeployment(this, 'DeployButExcludeSpecificFiles', {\n  sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n  destinationBucket,\n  exclude: ['*.txt']\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-deployment"
        },
        "field": {
          "field": "markdown",
          "line": 153
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "new s3deploy.BucketDeployment(this, 'DeployButExcludeSpecificFiles', {\n  sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n  destinationBucket,\n  exclude: ['*.txt']\n});",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "104": 1,
        "192": 2,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "d8439e85dee1aac24acdd657dcd547f54ed05b8bedbb63fe5752813c4fa5c4bf": {
      "translations": {
        "python": {
          "source": "website_bucket = s3.Bucket(self, \"WebsiteBucket\",\n    website_index_document=\"index.html\",\n    public_read_access=True\n)\n\ns3deploy.BucketDeployment(self, \"DeployWebsite\",\n    sources=[s3deploy.Source.asset(\"./website-dist\")],\n    destination_bucket=website_bucket,\n    destination_key_prefix=\"web/static\",  # optional prefix in destination bucket\n    metadata={\"A\": \"1\", \"b\": \"2\"},  # user-defined metadata\n\n    # system-defined metadata\n    content_type=\"text/html\",\n    content_language=\"en\",\n    storage_class=StorageClass.INTELLIGENT_TIERING,\n    server_side_encryption=ServerSideEncryption.AES_256,\n    cache_control=[CacheControl.set_public(), CacheControl.max_age(cdk.Duration.hours(1))],\n    access_control=s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var websiteBucket = new s3.Bucket(this, \"WebsiteBucket\", new Struct {\n    WebsiteIndexDocument = \"index.html\",\n    PublicReadAccess = true\n});\n\nnew s3deploy.BucketDeployment(this, \"DeployWebsite\", new Struct {\n    Sources = new [] { s3deploy.Source.Asset(\"./website-dist\") },\n    DestinationBucket = websiteBucket,\n    DestinationKeyPrefix = \"web/static\",  // optional prefix in destination bucket\n    Metadata = new Struct { A = \"1\", B = \"2\" },  // user-defined metadata\n\n    // system-defined metadata\n    ContentType = \"text/html\",\n    ContentLanguage = \"en\",\n    StorageClass = StorageClass.INTELLIGENT_TIERING,\n    ServerSideEncryption = ServerSideEncryption.AES_256,\n    CacheControl = new [] { CacheControl.SetPublic(), CacheControl.MaxAge(cdk.Duration.Hours(1)) },\n    AccessControl = s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL\n});",
          "version": "1"
        },
        "java": {
          "source": "Object websiteBucket = Bucket.Builder.create(this, \"WebsiteBucket\")\n        .websiteIndexDocument(\"index.html\")\n        .publicReadAccess(true)\n        .build();\n\nBucketDeployment.Builder.create(this, \"DeployWebsite\")\n        .sources(List.of(s3deploy.Source.asset(\"./website-dist\")))\n        .destinationBucket(websiteBucket)\n        .destinationKeyPrefix(\"web/static\") // optional prefix in destination bucket\n        .metadata(Map.of(\"A\", \"1\", \"b\", \"2\")) // user-defined metadata\n\n        // system-defined metadata\n        .contentType(\"text/html\")\n        .contentLanguage(\"en\")\n        .storageClass(StorageClass.getINTELLIGENT_TIERING())\n        .serverSideEncryption(ServerSideEncryption.getAES_256())\n        .cacheControl(List.of(CacheControl.setPublic(), CacheControl.maxAge(cdk.Duration.hours(1))))\n        .accessControl(s3.getBucketAccessControl().getBUCKET_OWNER_FULL_CONTROL())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const websiteBucket = new s3.Bucket(this, 'WebsiteBucket', {\n  websiteIndexDocument: 'index.html',\n  publicReadAccess: true\n});\n\nnew s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset('./website-dist')],\n  destinationBucket: websiteBucket,\n  destinationKeyPrefix: 'web/static', // optional prefix in destination bucket\n  metadata: { A: \"1\", b: \"2\" }, // user-defined metadata\n\n  // system-defined metadata\n  contentType: \"text/html\",\n  contentLanguage: \"en\",\n  storageClass: StorageClass.INTELLIGENT_TIERING,\n  serverSideEncryption: ServerSideEncryption.AES_256,\n  cacheControl: [CacheControl.setPublic(), CacheControl.maxAge(cdk.Duration.hours(1))],\n  accessControl: s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-deployment"
        },
        "field": {
          "field": "markdown",
          "line": 189
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const websiteBucket = new s3.Bucket(this, 'WebsiteBucket', {\n  websiteIndexDocument: 'index.html',\n  publicReadAccess: true\n});\n\nnew s3deploy.BucketDeployment(this, 'DeployWebsite', {\n  sources: [s3deploy.Source.asset('./website-dist')],\n  destinationBucket: websiteBucket,\n  destinationKeyPrefix: 'web/static', // optional prefix in destination bucket\n  metadata: { A: \"1\", b: \"2\" }, // user-defined metadata\n\n  // system-defined metadata\n  contentType: \"text/html\",\n  contentLanguage: \"en\",\n  storageClass: StorageClass.INTELLIGENT_TIERING,\n  serverSideEncryption: ServerSideEncryption.AES_256,\n  cacheControl: [CacheControl.setPublic(), CacheControl.maxAge(cdk.Duration.hours(1))],\n  accessControl: s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL,\n});",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 37,
        "104": 2,
        "106": 1,
        "192": 2,
        "193": 3,
        "194": 12,
        "196": 4,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "884d9b7e4a2c212e616c46f2af86b43e58c4190b77e629117aae42e7d7514883": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudfront as cloudfront\nimport aws_cdk.aws_cloudfront_origins as origins\n\nbucket = s3.Bucket(self, \"Destination\")\n\n# Handles buckets whether or not they are configured for website hosting.\ndistribution = cloudfront.Distribution(self, \"Distribution\",\n    default_behavior=cloudfront.BehaviorOptions(origin=origins.S3Origin(bucket))\n)\n\ns3deploy.BucketDeployment(self, \"DeployWithInvalidation\",\n    sources=[s3deploy.Source.asset(\"./website-dist\")],\n    destination_bucket=bucket,\n    distribution=distribution,\n    distribution_paths=[\"/images/*.png\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudFront;\nusing Amazon.CDK.AWS.CloudFront.Origins;\n\nvar bucket = new s3.Bucket(this, \"Destination\");\n\n// Handles buckets whether or not they are configured for website hosting.\nDistribution distribution = new Distribution(this, \"Distribution\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions { Origin = new S3Origin(bucket) }\n});\n\nnew s3deploy.BucketDeployment(this, \"DeployWithInvalidation\", new Struct {\n    Sources = new [] { s3deploy.Source.Asset(\"./website-dist\") },\n    DestinationBucket = bucket,\n    Distribution = distribution,\n    DistributionPaths = new [] { \"/images/*.png\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudfront.*;\nimport software.amazon.awscdk.services.cloudfront.origins.*;\n\nObject bucket = new Bucket(this, \"Destination\");\n\n// Handles buckets whether or not they are configured for website hosting.\nDistribution distribution = Distribution.Builder.create(this, \"Distribution\")\n        .defaultBehavior(BehaviorOptions.builder().origin(new S3Origin(bucket)).build())\n        .build();\n\nBucketDeployment.Builder.create(this, \"DeployWithInvalidation\")\n        .sources(List.of(s3deploy.Source.asset(\"./website-dist\")))\n        .destinationBucket(bucket)\n        .distribution(distribution)\n        .distributionPaths(List.of(\"/images/*.png\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\n\nconst bucket = new s3.Bucket(this, 'Destination');\n\n// Handles buckets whether or not they are configured for website hosting.\nconst distribution = new cloudfront.Distribution(this, 'Distribution', {\n  defaultBehavior: { origin: new origins.S3Origin(bucket) },\n});\n\nnew s3deploy.BucketDeployment(this, 'DeployWithInvalidation', {\n  sources: [s3deploy.Source.asset('./website-dist')],\n  destinationBucket: bucket,\n  distribution,\n  distributionPaths: ['/images/*.png'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-deployment"
        },
        "field": {
          "field": "markdown",
          "line": 215
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\n\nconst bucket = new s3.Bucket(this, 'Destination');\n\n// Handles buckets whether or not they are configured for website hosting.\nconst distribution = new cloudfront.Distribution(this, 'Distribution', {\n  defaultBehavior: { origin: new origins.S3Origin(bucket) },\n});\n\nnew s3deploy.BucketDeployment(this, 'DeployWithInvalidation', {\n  sources: [s3deploy.Source.asset('./website-dist')],\n  destinationBucket: bucket,\n  distribution,\n  distributionPaths: ['/images/*.png'],\n});",
      "syntaxKindCounter": {
        "10": 7,
        "75": 23,
        "104": 3,
        "192": 2,
        "193": 3,
        "194": 6,
        "196": 1,
        "197": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "f7872308664b6c3ffe6ee0116f38e2fd6f2b21903f1cc6b74c1dcaa2765895be"
    },
    "dcd0a275db8723a2a1bd509c6b5aa7428c1fe504a434f986e9c962b65325f9f8": {
      "translations": {
        "python": {
          "source": "s3deploy.BucketDeployment(self, \"DeployMeWithEfsStorage\",\n    sources=[s3deploy.Source.asset(path.join(__dirname, \"my-website\"))],\n    destination_bucket=destination_bucket,\n    destination_key_prefix=\"efs/\",\n    use_efs=True,\n    vpc=ec2.Vpc(self, \"Vpc\"),\n    retain_on_delete=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new s3deploy.BucketDeployment(this, \"DeployMeWithEfsStorage\", new Struct {\n    Sources = new [] { s3deploy.Source.Asset(path.Join(__dirname, \"my-website\")) },\n    DestinationBucket = destinationBucket,\n    DestinationKeyPrefix = \"efs/\",\n    UseEfs = true,\n    Vpc = new ec2.Vpc(this, \"Vpc\"),\n    RetainOnDelete = false\n});",
          "version": "1"
        },
        "java": {
          "source": "BucketDeployment.Builder.create(this, \"DeployMeWithEfsStorage\")\n        .sources(List.of(s3deploy.Source.asset(path.join(__dirname, \"my-website\"))))\n        .destinationBucket(destinationBucket)\n        .destinationKeyPrefix(\"efs/\")\n        .useEfs(true)\n        .vpc(new Vpc(this, \"Vpc\"))\n        .retainOnDelete(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new s3deploy.BucketDeployment(this, 'DeployMeWithEfsStorage', {\n    sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n    destinationBucket,\n    destinationKeyPrefix: 'efs/',\n    useEfs: true,\n    vpc: new ec2.Vpc(this, 'Vpc'),\n    retainOnDelete: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3-deployment"
        },
        "field": {
          "field": "markdown",
          "line": 252
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "new s3deploy.BucketDeployment(this, 'DeployMeWithEfsStorage', {\n    sources: [s3deploy.Source.asset(path.join(__dirname, 'my-website'))],\n    destinationBucket,\n    destinationKeyPrefix: 'efs/',\n    useEfs: true,\n    vpc: new ec2.Vpc(this, 'Vpc'),\n    retainOnDelete: false,\n});",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "91": 1,
        "104": 2,
        "106": 1,
        "192": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 2,
        "226": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    }
  }
}
